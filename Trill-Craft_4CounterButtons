// Functional example of using TrillRaw UGen.
// (C) 2019 Jonathan Reus

s = Server.default;

s.options.numAnalogInChannels = 8; // can be 2, 4 or 8
s.options.numAnalogOutChannels = 8; // can be 2, 4 or 8
s.options.numDigitalChannels = 16;
s.options.maxLogins = 8;

s.options.pgaGainLeft = 5;     // sets the pregain for the left audio input (dB)
s.options.pgaGainRight = 5;    // sets the pregain for the right audio input (dB)
s.options.headphoneLevel = -1; // sets the headphone level (-dB)
s.options.speakerMuted = 1;    // set true to mute the speaker amp and draw a little less power
s.options.dacLevel = 0;       // sets the gain of the analog dac to (dB)
s.options.adcLevel = 0;       // sets the gain of the analog adc to (dB)

s.options.blockSize = 16;
s.options.numInputBusChannels = 10;
s.options.numOutputBusChannels = 2;


s.waitForBoot {
	~tr = {
	|t_updateTrill = 1.0|
	var numTouchPads = 26;
	var i2c_bus = 1; // I2C bus to use on BeagleBone, usually you want this to be 1
	var i2c_address = 0x18; // I2C address of Trill sensor
	var noiseThresh = 40; // noise threshold, int: 5-255 (255=highest threshold)
	var prescalerOpt = 1; // sensitivity option, int: 0-4 (0=highest sensitivity, play with this for complex Trill Craft setups)
	var rawvals, step0,step1,step2,step3;
	var t_trig_0,t_trig_1,t_trig_2,t_trig_3;

	rawvals = TrillRaw.kr(i2c_bus, i2c_address, noiseThresh, prescalerOpt, t_updateTrill);
	
	step0 = PulseCount.kr(rawvals[0], Impulse.kr(0.17));
	step1 = PulseCount.kr(rawvals[1], Impulse.kr(0.17));
	step2 = PulseCount.kr(rawvals[2], Impulse.kr(0.17));
	step3 = PulseCount.kr(rawvals[3], Impulse.kr(0.17));
	
	t_trig_0 = Changed.kr(PulseCount.kr(rawvals[0], Impulse.kr(1)));
	t_trig_1 = Changed.kr(PulseCount.kr(rawvals[1], Impulse.kr(1)));
	t_trig_2 = Changed.kr(PulseCount.kr(rawvals[2], Impulse.kr(1)));
	t_trig_3 = Changed.kr(PulseCount.kr(rawvals[4], Impulse.kr(1)));
	

	// SendReply.kr(Impulse.kr(0.5), "/trill", rawvals);
	SendReply.kr(t_trig_0, "/trill", [ step0],101);
	SendReply.kr(t_trig_1, "/trill", [ step1],102);
	SendReply.kr(t_trig_2, "/trill", [ step2],103);
	SendReply.kr(t_trig_3, "/trill", [ step3],104);
	
	
	
	}.play;

	OSCdef(\trill, {|msg| msg[3..].postln;
	
		
		
	}, "/trill");
	
	{ // Illustrates updating the baseline should the configuration change while the sketch is running
		loop {
			55.wait;
			"Reset Trill baseline in 10s...".postln;
			5.wait;
			"Baseline Reset".postln;
			~tr.set(\t_updateTrill, 1);
		};
	}.fork;
};
